#pragma once

#include <stdint.h>

#include "encoder.h"
#include "utils.h"

class ScreenBase {
 protected:
  static ScreenBase* current;

 public:
  ScreenBase() {}
  virtual void enter();
  virtual void execute();
  virtual void leave();

  void select() {
    if (current) current->leave();
    current = this;
    current->enter();
  }
  static void executeCurrent() {
    current->execute();
  }
  bool isActive() const { return current == this; }

  static ScreenBase* defaultScreen;
  static ButtonState buttonState;
};

class DefaultScreen : public ScreenBase {
 private:
   uint16_t lastEncoder;
 public:
   int level = 0;
   virtual void enter() override;
   virtual void execute() override;
};

class TestScreen : public ScreenBase {
  public:
    virtual void execute() override;
};
 
class StaticAnimationScreen : public ScreenBase {
 private:
  static const uint32_t FRAME_RATE = 20;
  int next_frame;
  uint32_t last_frame_t;
 public:
  StaticAnimationScreen() : ScreenBase() {}
  virtual int framesCount() const = 0;
  virtual uint16_t frame(int i) const = 0;
  virtual void enter() override;
  virtual void execute() override;
};

class AnimationScreen : public ScreenBase {
 private:
   static const uint32_t FRAME_RATE = 333;
   static const int FRAMES_LEN = MAX_FRAMES;
   FramesData framesData;
   int next_frame;
   uint32_t last_frame_t;

  public:
   AnimationScreen() : ScreenBase(), framesData{0} {} 
   virtual void enter() override;
   virtual void execute() override;
   void setFrames(uint16_t* frames, int count);
   void setPattern1() { framesData = storage.frames; }
   const FramesData* framesDataPtr() const { return &framesData; }
};

class TransmitScreen : public ScreenBase {
 private:
  static const uint32_t BIT_RATE = 80;
  const FramesData* framesData;
  int bitIndex;
  uint32_t last_t;
 public:
  TransmitScreen(const FramesData* data) : ScreenBase(), framesData(data) {}
  virtual void enter() override;
  virtual void execute() override;
};

class GameScreen : public DefaultScreen {
  private:
    static const int MAX_STEPS = 12;
    unsigned char steps[MAX_STEPS] = {0};
    uint16_t lastEnc;
    int startLed;
    const unsigned char hashes[12][32] = {
                                    {0x5f,0xec,0xeb,0x66,0xff,0xc8,0x6f,0x38,0xd9,0x52,0x78,0x6c,0x6d,0x69,0x6c,0x79,0xc2,0xdb,0xc2,0x39,0xdd,0x4e,0x91,0xb4,0x67,0x29,0xd7,0x3a,0x27,0xfb,0x57,0xe9},
                                    {0x05,0x3a,0xbf,0xc4,0x89,0x63,0xf2,0xcb,0x94,0xeb,0xde,0x98,0xf9,0x6d,0x10,0x97,0x9c,0xda,0x07,0x07,0x33,0x33,0x1e,0x3e,0x9c,0xf4,0x08,0xf0,0xdf,0x2d,0x8c,0xc9},
                                    {0x3a,0x0e,0x14,0x02,0x6c,0x6b,0x1d,0x6b,0x4c,0xae,0x89,0x9e,0x45,0x1e,0x9e,0xbc,0xbd,0x96,0x46,0xc4,0x4a,0x95,0x64,0x40,0xf2,0x22,0x7b,0x22,0x12,0x44,0x7b,0xe6},
                                    {0x91,0x83,0xc2,0x9e,0xa0,0x13,0xb9,0x82,0xff,0x92,0x3f,0x04,0xbc,0xf8,0x1b,0xb7,0x9e,0xb4,0x81,0xd4,0x26,0x59,0xea,0x19,0xfe,0x42,0xbb,0xfe,0x2d,0x02,0x64,0xd0},
                                    {0x6b,0x3c,0x23,0x8e,0xbc,0xf1,0xf3,0xc0,0x7c,0xf0,0xe5,0x56,0xfa,0xa8,0x2c,0x6b,0x8f,0xe9,0x68,0x40,0xff,0x4b,0x6b,0x7e,0x99,0x62,0xa2,0xd8,0x55,0x84,0x3a,0x0b},
                                    {0x28,0x58,0xdc,0xd1,0x05,0x7d,0x3e,0xae,0x7f,0x7d,0x5f,0x78,0x21,0x67,0xe2,0x4b,0x61,0x15,0x3c,0x01,0x55,0x14,0x50,0xa6,0x28,0xce,0xe7,0x22,0x50,0x9f,0x65,0x29},
                                    {0xf2,0xf8,0x9e,0xde,0x8e,0x7d,0x4b,0x3d,0x22,0x43,0xde,0xa1,0xca,0x96,0xb8,0xec,0xe5,0x6f,0x79,0x38,0x11,0xd9,0x70,0x8b,0x4a,0x01,0x81,0xbf,0x81,0xa5,0x00,0x11},
                                    {0x5f,0xec,0xeb,0x66,0xff,0xc8,0x6f,0x38,0xd9,0x52,0x78,0x6c,0x6d,0x69,0x6c,0x79,0xc2,0xdb,0xc2,0x39,0xdd,0x4e,0x91,0xb4,0x67,0x29,0xd7,0x3a,0x27,0xfb,0x57,0xe9},
                                    {0xc9,0x4d,0x83,0x48,0xd7,0x5a,0x29,0x7c,0x77,0x94,0x70,0x56,0xee,0x89,0x12,0xf8,0xcc,0xbd,0x57,0x30,0x31,0xbb,0xac,0x1e,0x48,0xc1,0x66,0xe5,0xe5,0x4f,0x19,0xe4},
                                    {0x40,0xfb,0x71,0x64,0xe4,0x59,0xa3,0x88,0x13,0xf3,0x04,0xe3,0xb4,0x5d,0xb2,0xb0,0x74,0xbe,0x14,0x98,0x18,0x92,0x4e,0x46,0xfd,0xc4,0x9c,0xc3,0x8a,0x3e,0x49,0x55},
                                    {0x05,0x78,0x41,0x88,0xDB,0xCE,0xBD,0x80,0x66,0x96,0xB8,0x47,0xAB,0x7A,0xDE,0x54,0x6D,0x8B,0xC9,0x47,0x27,0xD9,0x0D,0xCC,0x86,0x7F,0x0F,0xEC,0x42,0x64,0xC0,0x55},
                                    {0x1e,0x73,0x6c,0x38,0x0e,0xc6,0xec,0x6d,0x7f,0x04,0x45,0xba,0xed,0x77,0xf2,0x12,0x28,0x90,0x05,0xa5,0x8b,0x7e,0xc7,0x9b,0xba,0x34,0xbe,0xc6,0xcb,0xcf,0x20,0x93}}; 

  public:
    virtual void enter() override;
    virtual void execute() override;
    void addInput(int steps);
    bool isDone() const;
};

class BreathingScreen : public StaticAnimationScreen {
 public:
  virtual int framesCount() const override;
  virtual uint16_t frame(int i) const override;
};